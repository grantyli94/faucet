{"ast":null,"code":"var _jsxFileName = \"/Users/grant.li/alchemy/faucet/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport FaucetInfo from './components/FaucetInfo';\nimport FaucetForm from './components/FaucetForm';\nimport Info from './components/Info';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\nfunction App() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState(''); // 'success', 'error', 'info'\n  const [faucetInfo, setFaucetInfo] = useState(null);\n  const [transactionHash, setTransactionHash] = useState('');\n\n  // Fetch faucet information on component mount\n  useEffect(() => {\n    fetchFaucetInfo();\n  }, []);\n  const fetchFaucetInfo = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/faucet/info`);\n      setFaucetInfo(response.data);\n    } catch (error) {\n      console.error('Error fetching faucet info:', error);\n    }\n  };\n  const validateAddress = addr => {\n    try {\n      return ethers.isAddress(addr);\n    } catch (error) {\n      return false;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!address.trim()) {\n      setMessage('Please enter an Ethereum address');\n      setMessageType('error');\n      return;\n    }\n    if (!validateAddress(address)) {\n      setMessage('Please enter a valid Ethereum address');\n      setMessageType('error');\n      return;\n    }\n    setLoading(true);\n    setMessage('');\n    setTransactionHash('');\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/faucet`, {\n        address: address.trim()\n      });\n      if (response.data.success) {\n        setMessage(`Successfully sent ${response.data.amount} ETH to ${response.data.to}`);\n        setMessageType('success');\n        setTransactionHash(response.data.transactionHash);\n        setAddress(''); // Clear the input\n\n        // Refresh faucet info to show updated balance\n        fetchFaucetInfo();\n      } else {\n        setMessage(response.data.error || 'Transaction failed');\n        setMessageType('error');\n      }\n    } catch (error) {\n      console.error('Error requesting funds:', error);\n      if (error.response && error.response.data && error.response.data.error) {\n        setMessage(error.response.data.error);\n      } else if (error.code === 'NETWORK_ERROR') {\n        setMessage('Network error. Please check if the backend server is running.');\n      } else {\n        setMessage('Failed to request funds. Please try again.');\n      }\n      setMessageType('error');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddressChange = e => {\n    setAddress(e.target.value);\n    // Clear message when user starts typing\n    if (message) {\n      setMessage('');\n      setMessageType('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDEB0 Ethereum Sepolia Testnet Faucet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Get free testnet ETH for development and testing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(FaucetInfo, {\n        faucetInfo: faucetInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaucetForm, {\n        address: address,\n        loading: loading,\n        message: message,\n        messageType: messageType,\n        transactionHash: transactionHash,\n        faucetInfo: faucetInfo,\n        onAddressChange: handleAddressChange,\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"App-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Built for Ethereum development and testing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bRchMIXmEN2Q5D4uyqQInMK7Wk0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","ethers","FaucetInfo","FaucetForm","Info","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","App","_s","address","setAddress","loading","setLoading","message","setMessage","messageType","setMessageType","faucetInfo","setFaucetInfo","transactionHash","setTransactionHash","fetchFaucetInfo","response","get","data","error","console","validateAddress","addr","isAddress","handleSubmit","e","preventDefault","trim","post","success","amount","to","code","handleAddressChange","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddressChange","onSubmit","_c","$RefreshReg$"],"sources":["/Users/grant.li/alchemy/faucet/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport FaucetInfo from './components/FaucetInfo';\nimport FaucetForm from './components/FaucetForm';\nimport Info from './components/Info';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001';\n\nfunction App() {\n  const [address, setAddress] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState(''); // 'success', 'error', 'info'\n  const [faucetInfo, setFaucetInfo] = useState(null);\n  const [transactionHash, setTransactionHash] = useState('');\n\n  // Fetch faucet information on component mount\n  useEffect(() => {\n    fetchFaucetInfo();\n  }, []);\n\n  const fetchFaucetInfo = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/faucet/info`);\n      setFaucetInfo(response.data);\n    } catch (error) {\n      console.error('Error fetching faucet info:', error);\n    }\n  };\n\n  const validateAddress = (addr) => {\n    try {\n      return ethers.isAddress(addr);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!address.trim()) {\n      setMessage('Please enter an Ethereum address');\n      setMessageType('error');\n      return;\n    }\n\n    if (!validateAddress(address)) {\n      setMessage('Please enter a valid Ethereum address');\n      setMessageType('error');\n      return;\n    }\n\n    setLoading(true);\n    setMessage('');\n    setTransactionHash('');\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/faucet`, {\n        address: address.trim()\n      });\n\n      if (response.data.success) {\n        setMessage(`Successfully sent ${response.data.amount} ETH to ${response.data.to}`);\n        setMessageType('success');\n        setTransactionHash(response.data.transactionHash);\n        setAddress(''); // Clear the input\n        \n        // Refresh faucet info to show updated balance\n        fetchFaucetInfo();\n      } else {\n        setMessage(response.data.error || 'Transaction failed');\n        setMessageType('error');\n      }\n    } catch (error) {\n      console.error('Error requesting funds:', error);\n      \n      if (error.response && error.response.data && error.response.data.error) {\n        setMessage(error.response.data.error);\n      } else if (error.code === 'NETWORK_ERROR') {\n        setMessage('Network error. Please check if the backend server is running.');\n      } else {\n        setMessage('Failed to request funds. Please try again.');\n      }\n      setMessageType('error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddressChange = (e) => {\n    setAddress(e.target.value);\n    // Clear message when user starts typing\n    if (message) {\n      setMessage('');\n      setMessageType('');\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ğŸš° Ethereum Sepolia Testnet Faucet</h1>\n        <p>Get free testnet ETH for development and testing</p>\n      </header>\n\n      <main className=\"App-main\">\n        <FaucetInfo faucetInfo={faucetInfo} />\n        \n        <FaucetForm \n          address={address}\n          loading={loading}\n          message={message}\n          messageType={messageType}\n          transactionHash={transactionHash}\n          faucetInfo={faucetInfo}\n          onAddressChange={handleAddressChange}\n          onSubmit={handleSubmit}\n        />\n\n        <Info />\n      </main>\n\n      <footer className=\"App-footer\">\n        <p>Built for Ethereum development and testing</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}